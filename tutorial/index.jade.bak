.step(
  data-title='What Does This Thing Do?',
  data-file='app.rb')
  :markdown
    ## What Does This Thing Do?

    This [Sinatra](http://www.sinatrarb.com/) application is an Employee
    Directory that can be used from any SMS client to find an employee's contact
    information. To build this app, we will need to.

    - Create an Employee model.
    - Receive an incoming SMS.
    - Search for an Employee by name.
    - Respond with an outgoing MMS.

    Let's get started!

    ---

    **See Also:**
    * [Sinatra](http://www.sinatrarb.com/)

.step(
  data-title='Create an Employee Model',
  data-file='models/employee.rb')
  :markdown
    ## Create an Employee Model

    The first thing we need is a database of employees. We will be using
    [DataMapper](//datamapper.org/) for this. It will allow us to define our
    database structure without having to worry with database specifics.

    Our employee entity has a few fields for contact information, including
    their name, e-mail, phone number, and a public URL containing an image of
    them.

    Now, let's build the logic to search for employees.

    ---

    **See Also:**
    * [DataMapper](//datamapper.org)

.step(
  data-title='Search for an Employee by Name',
  data-file='lib/searcher.rb')
  :markdown
    ## Search for an Employee

    The `Searcher` module allows us to search the database for employees either
    by name or by their unique database identifier.

    When searching using the employee name as parameter, we'll return a list of
    employees whose name might match a search query. If we pass a number as
    parameter we'll use it to search the employee by its id.

    We'll use this search functionality when responding to an SMS from a user,
    which we'll look at next.

.step(
  data-title='Receive an Incoming SMS',
  data-file='routes/employee.rb')
  :markdown
    ## Receive an Incoming SMS

    When your number receives an SMS message,
    [Twilio will send an HTTP POST request to our application][webhook]. This
    will be handled by the `/employee` endpoint.

    We use the `search` method to look for an employee based upon
    the SMS `Body` received. Depending on the number of employees
    found we return a different message with the result of the
    search.

    Let's take a closer look at building the response.

    ---

    **See Also:**
    * [How Twilio Passes Data to Your Application][webhook]
    * [TwiML: The Twilio Markup Language][twiml]

    [webhook]:  https://www.twilio.com/docs/api/twiml/sms/twilio_request
    [twiml]: https://www.twilio.com/docs/api/twiml

.step(
  data-title='Responding With a Single Match for an Employee Name',
  data-file='lib/message_creator.rb',
  data-highlight='18-31')
  :markdown
    ## Responding With a Single Match for an Employee Name

    Let's say the service finds a single employee matching the
    text message. In this case, we write out a response that
    contains the employee's contact information, including a photo,
    making our response a MMS message.

    A single matching employee isn't the only scenario, however.

    ---

    **See Also:**
    * [Twilio Docs: <Message> Verb](https://www.twilio.com/docs/api/twiml/sms/message)

.step(data-title='What If No Employee or Multiple Employees Match?',
      data-file='lib/message_creator.rb',
      data-highlight='6-16')
  :markdown
    ## What If No Employee or Multiple Employees Match?

    If we don't find any employees, we can simply return a
    "Not found" message.

    What about multiple matches? For this case, we want to return
    a list of the matching employees' names along with an id number
    the end user can use to make their selection. For example,
    if someone searched for "Peter" they might get something like:

    ```
    1-Peter Parker 2-Peter Quill
    ```

.step(
  data-title="Returning Employee's Contact Information by Number Choice",
    data-file='lib/searcher.rb')
  :markdown
    ## Returning Employee's Contact Information by Number Choice

    When searching for an employee, we check wether the body of
    the text input is a number. If that's the case, we use it
    to retrieve the employee by its id. On the other case, we
    use it to do a search by employeer's name.

    ![winning](//howtodocs.s3.amazonaws.com/employee-directory/win.gif)

.step(
  data-title='Where to Next',
  data-file='app.rb')
  :markdown
    ## Where to next?

    Take a look at [the code on GitHub][gh] to run the application
    yourself. There you will find the complete solution and
    instructions for getting up and running.

    [gh]: https://github.com/TwilioDevEd/employee-directory-sinatra

    If you're a ruby developer working with Twilio, you might want to
    check out these other tutorials.

    [**Automated Survey**](https://www.twilio.com/docs/tutorials/walkthrough/automated-survey/ruby/sinatra)

    [**SMS and MMS Marketing Notifications**](https://www.twilio.com/docs/tutorials/walkthrough/marketing-notifications/ruby/sinatra)

    ### Did this help?

    Thanks for checking out this tutorial! If you have any feedback
    to share with us, we'd love to hear it.
    [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
